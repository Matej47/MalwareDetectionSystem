import datetime
import json
import os
import shutil
import asyncio
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
import sys


class DropArea(QtWidgets.QLabel):
    def __init__(self):
        super().__init__()
        self.setText("\n\n Drop files here \n\n")
        self.setAlignment(Qt.AlignCenter)
        self.setStyleSheet("""
            QLabel {
                border: 4px dashed #aaa;
                background-color: #f0f0f0;
                font-size: 40px;
                color: rgba(0, 0, 0, 0.40);
            }
        """)

    def setPathText(self, text):
        self.setText(text)


class DragDropWidget(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Drag and Drop File")
        self.resize(400, 400)
        # Set the minimum size of the window
        self.setMinimumSize(0, 250)

        self.layout = QtWidgets.QVBoxLayout()
        self.dropArea = DropArea()
        self.layout.addWidget(self.dropArea)
        self.setLayout(self.layout)

        # Enable drag and drop for this widget
        self.setAcceptDrops(True)

    def dragEnterEvent(self, event):
        if event.mimeData().hasUrls():
            event.accept()
        else:
            event.ignore()

    def dropEvent(self, event):
        for url in event.mimeData().urls():
            file_path = url.toLocalFile()
            self.dropArea.setText("\n\n File has been loaded \n\n")
            # self.insert_file_path_into_database(file_path)
            self.copy_file_to_server_folder(file_path)

    def copy_file_to_server_folder(self, file_path):
        # Replace '/path/to/server/folder' with the actual path to your server folder

        # Get the directory of the current script (gui.py)
        script_directory = os.path.dirname(os.path.realpath(__file__))
        # Navigate one level above gui.py to get the parent directory (DP)
        parent_directory = os.path.dirname(script_directory)
        # Specify the path to the dnd_modules directory
        client_modules_path = os.path.join(parent_directory, 'dnd_modules')

        server_folder = client_modules_path
        if not os.path.exists(server_folder):
            os.makedirs(server_folder)
        file_name = os.path.basename(file_path)
        destination_path = os.path.join(server_folder, file_name)
        shutil.copy2(file_path, destination_path)


class Ui_MainWindow(object):
    def setupUi(self, MainWindow,db_service, send_to_client_func):
        self.db_service = db_service
        self.send_msg_to_client = send_to_client_func
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1000, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.horizontalLayout.setSpacing(6)
        self.horizontalLayout.setObjectName("horizontalLayout")

        # Create a button group for checkable buttons
        self.button_group = QtWidgets.QButtonGroup(self.centralwidget)
        self.button_group.buttonClicked.connect(self.on_button_clicked)

        # Devices button
        self.pushbutton_devices = QtWidgets.QPushButton("Devices")
        font = QtGui.QFont()
        font.setPointSize(14)
        self.pushbutton_devices.setFont(font)
        self.pushbutton_devices.setCheckable(True)
        self.pushbutton_devices.setChecked(True)
        self.pushbutton_devices.setFlat(True)
        self.pushbutton_devices.setObjectName("pushButton_5")
        self.button_group.addButton(self.pushbutton_devices)
        self.horizontalLayout.addWidget(self.pushbutton_devices)

        # Addmodule button
        self.pushbutton_addmodule = QtWidgets.QPushButton("Add module")
        font = QtGui.QFont()
        font.setPointSize(14)
        self.pushbutton_addmodule.setFont(font)
        self.pushbutton_addmodule.setCheckable(True)
        self.pushbutton_addmodule.setFlat(True)
        self.pushbutton_addmodule.setObjectName("pushButton_4")
        self.button_group.addButton(self.pushbutton_addmodule)
        self.horizontalLayout.addWidget(self.pushbutton_addmodule)

        # Data button
        self.pushbutton_data = QtWidgets.QPushButton("Data")
        font = QtGui.QFont()
        font.setPointSize(14)
        self.pushbutton_data.setFont(font)
        self.pushbutton_data.setCheckable(True)
        self.pushbutton_data.setFlat(True)
        self.pushbutton_data.setObjectName("pushButton_3")
        self.button_group.addButton(self.pushbutton_data)
        self.horizontalLayout.addWidget(self.pushbutton_data)

        # Analysis button
        self.pushbutton_analysis = QtWidgets.QPushButton("Analysis")
        font = QtGui.QFont()
        font.setPointSize(14)
        self.pushbutton_analysis.setFont(font)
        self.pushbutton_analysis.setCheckable(True)
        self.pushbutton_analysis.setFlat(True)
        self.pushbutton_analysis.setObjectName("pushButton_7")
        self.button_group.addButton(self.pushbutton_analysis)
        self.horizontalLayout.addWidget(self.pushbutton_analysis)

        # Settings button
        self.pushbutton_settings = QtWidgets.QPushButton("Settings")
        font = QtGui.QFont()
        font.setPointSize(14)
        self.pushbutton_settings.setFont(font)
        self.pushbutton_settings.setCheckable(True)
        self.pushbutton_settings.setFlat(True)
        self.pushbutton_settings.setObjectName("pushButton_2")
        self.button_group.addButton(self.pushbutton_settings)
        self.horizontalLayout.addWidget(self.pushbutton_settings)

        # Horizontal spacer
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)

        # Sync button
        self.pushbutton_sync = QtWidgets.QPushButton("Sync")
        font = QtGui.QFont()
        font.setPointSize(14)
        self.pushbutton_sync.setFont(font)
        self.pushbutton_sync.setCheckable(False)
        self.pushbutton_sync.setFlat(False)
        self.pushbutton_sync.setObjectName("pushButton_6")
        self.horizontalLayout.addWidget(self.pushbutton_sync)
        self.pushbutton_sync.clicked.connect(lambda: self.sync_button_click())

        # Run all button
        self.pushbutton_runall = QtWidgets.QPushButton("Run All")
        font = QtGui.QFont()
        font.setPointSize(14)
        self.pushbutton_runall.setFont(font)
        self.pushbutton_runall.setCheckable(False)
        self.pushbutton_runall.setFlat(False)
        self.pushbutton_runall.setObjectName("pushButton_6")
        self.horizontalLayout.addWidget(self.pushbutton_runall)

        # Adding horizontal layout with buttons to main layout
        self.verticalLayout_2.addLayout(self.horizontalLayout)

        # Line under buttons
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.verticalLayout_2.addWidget(self.line)

        self.device_page(True)

        # No idea tf is this
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def device_page(self, mode):
        if mode and not hasattr(self, 'horizontalLayout_2'):
            # Horizontal layout for devices, mudule list and scroll bar
            self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
            self.horizontalLayout_2.setSpacing(0)
            self.horizontalLayout_2.setObjectName("horizontalLayout_2")

            # Devices list
            self.listWidget = QtWidgets.QListWidget(self.centralwidget)
            sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Expanding)
            sizePolicy.setHorizontalStretch(0)
            sizePolicy.setVerticalStretch(0)
            sizePolicy.setHeightForWidth(self.listWidget.sizePolicy().hasHeightForWidth())
            self.listWidget.setSizePolicy(sizePolicy)
            self.listWidget.setObjectName("listWidget")
            self.horizontalLayout_2.addWidget(self.listWidget)
            # for device in self.db_service.get_all_devices():
            #     self.listWidget.addItem(device.ip)

            # Loop through devices and add buttons to the list
            for device in self.db_service.get_all_devices():
                if device.ip == "server":
                    continue
                button = QtWidgets.QPushButton(device.ip)
                # Connect a slot to handle button clicks
                button.clicked.connect(lambda: self.handle_device_button_click(button))
                item = QtWidgets.QListWidgetItem()
                self.listWidget.addItem(item)
                self.listWidget.setItemWidget(item, button)

            # Vertical spacer
            spacerItem1 = QtWidgets.QSpacerItem(0, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
            self.horizontalLayout_2.addItem(spacerItem1)

            # Module list
            self.listWidget_2 = QtWidgets.QListWidget(self.centralwidget)
            self.listWidget_2.setObjectName("listWidget_2")
            self.horizontalLayout_2.addWidget(self.listWidget_2)

            # Add layout with lists to main layout
            self.verticalLayout_2.addLayout(self.horizontalLayout_2)
            self.version_line(True)
        elif not mode and hasattr(self, 'horizontalLayout_2'):
            # Recursively delete all child widgets within the layout
            def delete_child_widgets(layout):
                if layout is not None:
                    while layout.count():
                        item = layout.takeAt(0)
                        widget = item.widget()
                        if widget is not None:
                            widget.deleteLater()
                        else:
                            delete_child_widgets(item.layout())

            delete_child_widgets(self.horizontalLayout_2)

            # Remove the layout itself
            self.verticalLayout_2.removeItem(self.horizontalLayout_2)
            self.horizontalLayout_2.deleteLater()
            self.version_line(False)
            del self.horizontalLayout_2

    # Define a slot to handle device button clicks
    def handle_device_button_click(self, button):
        self.listWidget_2.clear()
        report = self.db_service.get_last_report_for_device(button.text())
        moduly = self.db_service.get_modules_for_device(button.text())
        # if moduly:
        #     for module in self.db_service.get_modules_for_device(button.text()):
        #         widget = self.create_list_module_widget(module.file_path, "12.3.2024", "Ok", button.text())
        #         item = QtWidgets.QListWidgetItem()
        #         item.setSizeHint(QtCore.QSize(50, 40))
        #         self.listWidget_2.addItem(item)
        #         self.listWidget_2.setItemWidget(item, widget)
        # else:
        #     widget = self.create_list_module_widget("Niesu moduly", "fakt nie", "naozaj")
        #     item = QtWidgets.QListWidgetItem()
        #     item.setSizeHint(QtCore.QSize(50, 40))
        #     self.listWidget_2.addItem(item)
        #     self.listWidget_2.setItemWidget(item, widget)
        if report:
            report_data_dic = json.loads(report["data"])
            for module in report_data_dic:
                widget = self.create_list_module_widget(module, report["timestamp"], report_data_dic[module]["status"], button.text())
                item = QtWidgets.QListWidgetItem()
                item.setSizeHint(QtCore.QSize(50, 40))
                self.listWidget_2.addItem(item)
                self.listWidget_2.setItemWidget(item, widget)
        else:
            widget = self.create_list_module_widget("Niesu reporty", "fakt nie", "naozaj")
            item = QtWidgets.QListWidgetItem()
            item.setSizeHint(QtCore.QSize(50, 40))
            self.listWidget_2.addItem(item)
            self.listWidget_2.setItemWidget(item, widget)

    def create_list_module_widget(self, file_path, date, status, device):
        layout = QtWidgets.QHBoxLayout()
        layout.setSpacing(0)  # Set spacing to 0 to remove any gaps between widgets
        label1 = QtWidgets.QLabel(file_path)
        label1.setFont(QtGui.QFont("Arial", 12))  # Set font size
        spin_box = QtWidgets.QSpinBox()
        spin_box.setMinimum(0)
        spin_box.setMaximum(10)
        premenna = self.db_service.get_current_module_priority(device, file_path)
        spin_box.setValue(premenna[0])
        spin_box.valueChanged.connect(lambda: self.spin_box_value_changed(premenna[1], device, spin_box.value()))

        # Set the width of the spin box
        spin_box.setFixedWidth(40)  # Adjust the width as needed
        layout.addWidget(spin_box)
        layout.addWidget(label1)
        layout.addWidget(QtWidgets.QLabel(f'Last checked: {date.strftime("%d:%m:%Y %H:%M")}'))
        layout.addWidget(QtWidgets.QLabel(f'Status: {status}'))
        # layout.addItem(QtWidgets.QSpacerItem(10, 10, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum))

        widget = QtWidgets.QWidget()
        widget.setLayout(layout)
        # widget.setMinimumSize(50, 50)  # Set minimum size of the widget
        return widget

    def spin_box_value_changed(self, file_path, device, value):
        self.db_service.change_module_priority(device, file_path, value)

    def version_line(self, mode):
        if mode:
            # Add bottom line
            self.line_2 = QtWidgets.QFrame(self.centralwidget)
            self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
            self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
            self.line_2.setObjectName("line_2")
            self.verticalLayout_2.addWidget(self.line_2)

            # Label with version
            self.label_version = QtWidgets.QLabel(self.centralwidget)
            self.label_version.setObjectName("label")
            self.verticalLayout_2.addWidget(self.label_version)
            _translate = QtCore.QCoreApplication.translate
            self.label_version.setText(_translate("MainWindow", "  Version 1.0.0"))
        else:
            # Remove the widgets added in the if block
            self.verticalLayout_2.removeWidget(self.line_2)
            self.verticalLayout_2.removeWidget(self.label_version)

            # Delete the widgets
            self.line_2.deleteLater()
            self.label_version.deleteLater()

    def addmodule_page(self, mode):
        if mode and not hasattr(self, 'vertical_layout_module'):
            # Create vertical layout
            self.vertical_layout_module = QtWidgets.QVBoxLayout()
            self.vertical_layout_module.setSpacing(0)
            self.vertical_layout_module.setObjectName("vertical_layout_module")

            button_layout = QtWidgets.QHBoxLayout()

            # # Create drag-and-drop area
            self.drop_area = DragDropWidget()

            # Create buttons
            self.add_to_server_button = QtWidgets.QPushButton("Add to Server")
            self.add_to_client_button = QtWidgets.QPushButton("Add to Client")

            # VSpacer
            spacer_item = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)

            # Add widgets to layouts
            self.vertical_layout_module.addWidget(self.drop_area)
            # self.vertical_layout_module.addWidget(self.label)
            self.vertical_layout_module.addLayout(button_layout)
            button_layout.addWidget(self.add_to_server_button)
            button_layout.addWidget(self.add_to_client_button)
            self.vertical_layout_module.addItem(spacer_item)

            # Set up connections
            self.add_to_server_button.clicked.connect(self.add_to_server)
            self.add_to_client_button.clicked.connect(self.add_to_client)

            # Add layout to main one
            self.verticalLayout_2.addLayout(self.vertical_layout_module)
            self.version_line(True)

        elif not mode and hasattr(self, 'vertical_layout_module'):
            # Recursively delete all child widgets within the layout
            def delete_child_widgets(layout):
                if layout is not None:
                    while layout.count():
                        item = layout.takeAt(0)
                        widget = item.widget()
                        if widget is not None:
                            widget.deleteLater()
                        else:
                            delete_child_widgets(item.layout())

            delete_child_widgets(self.vertical_layout_module)

            # Remove the layout itself
            self.verticalLayout_2.removeItem(self.vertical_layout_module)
            self.vertical_layout_module.deleteLater()
            self.version_line(False)
            del self.vertical_layout_module

    def data_page(self, mode):
        if mode and not hasattr(self, 'vertical_layout_module'):
            # Create vertical layout
            self.vertical_layout_module = QtWidgets.QVBoxLayout()
            self.vertical_layout_module.setSpacing(0)
            self.vertical_layout_module.setObjectName("vertical_layout_module")

            # VSpacer
            spacer_item = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)

            # Add widgets to layouts
            self.vertical_layout_module.addItem(spacer_item)

            # Add layout to main one
            self.verticalLayout_2.addLayout(self.vertical_layout_module)
            self.version_line(True)

        elif not mode and hasattr(self, 'vertical_layout_module'):
            # Recursively delete all child widgets within the layout
            def delete_child_widgets(layout):
                if layout is not None:
                    while layout.count():
                        item = layout.takeAt(0)
                        widget = item.widget()
                        if widget is not None:
                            widget.deleteLater()
                        else:
                            delete_child_widgets(item.layout())

            delete_child_widgets(self.vertical_layout_module)

            # Remove the layout itself
            self.verticalLayout_2.removeItem(self.vertical_layout_module)
            self.vertical_layout_module.deleteLater()
            self.version_line(False)
            del self.vertical_layout_module

    def analysis_page(self, mode):
        if mode and not hasattr(self, 'horizontalLayout_2'):
            # Horizontal layout for devices, mudule list and scroll bar
            self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
            self.horizontalLayout_2.setSpacing(0)
            self.horizontalLayout_2.setObjectName("horizontalLayout_2")

            # Vertical spacer
            spacerItem1 = QtWidgets.QSpacerItem(0, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
            self.horizontalLayout_2.addItem(spacerItem1)

        #     report = self.db_service.get_last_report_for_device("server")
            moduly = self.db_service.get_modules_for_device("server")
        #
        #

            # Module list
            self.listWidget_2 = QtWidgets.QListWidget(self.centralwidget)
            self.listWidget_2.setObjectName("listWidget_2")
            for module in moduly:
                module_name = module.file_path.split('\\')[-1].replace('.py', '')
                widget = self.create_list_module_widget(module_name, datetime.datetime.now(), module.active, "server")
                item = QtWidgets.QListWidgetItem()
                item.setSizeHint(QtCore.QSize(50, 40))
                self.listWidget_2.addItem(item)
                self.listWidget_2.setItemWidget(item, widget)

            self.horizontalLayout_2.addWidget(self.listWidget_2)
        #
            # Add layout with lists to main layout
            self.verticalLayout_2.addLayout(self.horizontalLayout_2)
            self.version_line(True)
        elif not mode and hasattr(self, 'horizontalLayout_2'):
            # Recursively delete all child widgets within the layout
            def delete_child_widgets(layout):
                if layout is not None:
                    while layout.count():
                        item = layout.takeAt(0)
                        widget = item.widget()
                        if widget is not None:
                            widget.deleteLater()
                        else:
                            delete_child_widgets(item.layout())

            delete_child_widgets(self.horizontalLayout_2)

            # Remove the layout itself
            self.verticalLayout_2.removeItem(self.horizontalLayout_2)
            self.horizontalLayout_2.deleteLater()
            self.version_line(False)
            del self.horizontalLayout_2


        # if mode and not hasattr(self, 'vertical_layout_module'):
        #     report = self.db_service.get_last_report_for_device("server")
        #     moduly = self.db_service.get_modules_for_device("server")
        #
        #     # Horizontal layout for devices, mudule list and scroll bar
        #     self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        #     self.horizontalLayout_2.setSpacing(0)
        #     self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        #
        #     # Vertical spacer
        #     spacerItem1 = QtWidgets.QSpacerItem(0, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        #     self.horizontalLayout_2.addItem(spacerItem1)
        #
        #     # Module list
        #     self.listWidget_2 = QtWidgets.QListWidget(self.centralwidget)
        #     self.listWidget_2.setObjectName("listWidget_2")
        #     self.horizontalLayout_2.addWidget(self.listWidget_2)
        #
        #     if report:
        #         report_data_dic = json.loads(report["data"])
        #         # for module in report_data_dic:
        #         #     widget = self.create_list_module_widget(module, report["timestamp"],
        #         #                                             report_data_dic[module]["status"], "server")
        #         #     item = QtWidgets.QListWidgetItem()
        #         #     item.setSizeHint(QtCore.QSize(50, 40))
        #         #     self.listWidget_2.addItem(item)
        #         #     self.listWidget_2.setItemWidget(item, widget)
        #     else:
        #         for module in moduly:
        #             widget = self.create_list_module_widget(module.file_path, datetime.datetime.now(), module.active, "server")
        #             item = QtWidgets.QListWidgetItem()
        #             item.setSizeHint(QtCore.QSize(50, 40))
        #             self.listWidget_2.addItem(item)
        #             self.listWidget_2.setItemWidget(item, widget)
        #
        #     # VSpacer
        #     # spacer_item = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        #
        #     # Add widgets to layouts
        #     # self.vertical_layout_module.addItem(spacer_item)
        #
        #     # Add layout to main one
        #     self.verticalLayout_2.addLayout(self.vertical_layout_module)
        #     self.version_line(True)
        #
        # elif not mode and hasattr(self, 'horizontalLayout_2'):
        #     # Recursively delete all child widgets within the layout
        #     def delete_child_widgets(layout):
        #         if layout is not None:
        #             while layout.count():
        #                 item = layout.takeAt(0)
        #                 widget = item.widget()
        #                 if widget is not None:
        #                     widget.deleteLater()
        #                 else:
        #                     delete_child_widgets(item.layout())
        #
        #     delete_child_widgets(self.vertical_layout_module)
        #
        #     # Remove the layout itself
        #     self.verticalLayout_2.removeItem(self.horizontalLayout_2)
        #     self.horizontalLayout_2.deleteLater()
        #     self.version_line(False)
        #     del self.horizontalLayout_2

    def settings_page(self, mode):
        if mode and not hasattr(self, 'vertical_layout_module'):
            # Create vertical layout
            self.vertical_layout_module = QtWidgets.QVBoxLayout()
            self.vertical_layout_module.setSpacing(0)
            self.vertical_layout_module.setObjectName("vertical_layout_module")

            # VSpacer
            spacer_item = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)

            # Add widgets to layouts
            self.vertical_layout_module.addItem(spacer_item)

            # Add layout to main one
            self.verticalLayout_2.addLayout(self.vertical_layout_module)
            self.version_line(True)

        elif not mode and hasattr(self, 'vertical_layout_module'):
            # Recursively delete all child widgets within the layout
            def delete_child_widgets(layout):
                if layout is not None:
                    while layout.count():
                        item = layout.takeAt(0)
                        widget = item.widget()
                        if widget is not None:
                            widget.deleteLater()
                        else:
                            delete_child_widgets(item.layout())

            delete_child_widgets(self.vertical_layout_module)

            # Remove the layout itself
            self.verticalLayout_2.removeItem(self.vertical_layout_module)
            self.vertical_layout_module.deleteLater()
            self.version_line(False)
            del self.vertical_layout_module

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Memory Analysis Tool"))

    def on_button_clicked(self, button):
        # Handle the button clicked event
        for btn in self.button_group.buttons():
            if btn is not button:
                btn.setChecked(False)
        if button == self.pushbutton_devices:
            self.addmodule_page(False)
            self.data_page(False)
            self.analysis_page(False)
            self.settings_page(False)
            self.device_page(True)
        elif button == self.pushbutton_addmodule:
            self.device_page(False)
            self.data_page(False)
            self.analysis_page(False)
            self.settings_page(False)
            self.addmodule_page(True)
        elif button == self.pushbutton_data:
            self.addmodule_page(False)
            self.device_page(False)
            self.analysis_page(False)
            self.settings_page(False)
            self.data_page(True)
        elif button == self.pushbutton_analysis:
            self.addmodule_page(False)
            self.device_page(False)
            self.data_page(False)
            self.settings_page(False)
            self.analysis_page(True)
        elif button == self.pushbutton_settings:
            self.addmodule_page(False)
            self.device_page(False)
            self.data_page(False)
            self.analysis_page(False)
            self.settings_page(True)

    # def update_device_list(self, device, connected):
    #     if connected:
    #         self.listWidget.addItem(device)
    #     else:
    #         items = self.listWidget.findItems(device, QtCore.Qt.MatchExactly)
    #         for item in items:
    #             row = self.listWidget.row(item)
    #             self.listWidget.takeItem(row)

    def add_to_server(self):
        source_folder = os.path.join(os.path.dirname(__file__), '..', 'dnd_modules')
        server_modules_path = os.path.join(os.path.dirname(__file__), '..', 'modules', 'server_modules')

        # Create the server_modules directory if it doesn't exist
        if not os.path.exists(server_modules_path):
            os.makedirs(server_modules_path)

        # Move all modules from dnd_modules to server_modules
        for file_name in os.listdir(source_folder):
            file_path = os.path.join(source_folder, file_name)
            if os.path.isfile(file_path):
                shutil.move(file_path, server_modules_path)
                self.db_service.create_client_module(os.path.join(server_modules_path, file_name), True, 0, "server")

    def add_to_client(self):
        source_folder = os.path.join(os.path.dirname(__file__), '..', 'dnd_modules')
        client_modules_path = os.path.join(os.path.dirname(__file__), '..', 'modules', 'client_modules')

        # Create the client_modules directory if it doesn't exist
        if not os.path.exists(client_modules_path):
            os.makedirs(client_modules_path)

        # Move all modules from dnd_modules to client_modules
        for file_name in os.listdir(source_folder):
            file_path = os.path.join(source_folder, file_name)
            if os.path.isfile(file_path):
                shutil.move(file_path, client_modules_path)
                self.db_service.create_client_module(os.path.join(client_modules_path, file_name))

    def sync_button_click(self):
        asyncio.run(self.send_msg_to_client())
        pass


def run_gui(device_signal, db_service, send_to_client_func):
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow, db_service, send_to_client_func)
    MainWindow.show()
    # device_signal.set_callback(ui.update_device_list)
    app.exec_()
