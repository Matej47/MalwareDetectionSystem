from sqlalchemy import create_engine, Column, Integer, String, ForeignKey, DateTime, Text, Boolean, desc
from sqlalchemy.orm import relationship, sessionmaker
from sqlalchemy.ext.declarative import declarative_base
from datetime import datetime
import json

# Create a base class for declarative class definitions
Base = declarative_base()


# Define a class representing the 'dnd_modules' table
class Module(Base):
    __tablename__ = 'modules'

    id = Column(Integer, primary_key=True)
    file_path = Column(String)
    active = Column(Boolean, default=True)
    priority = Column(Integer)
    device_id = Column(Integer, ForeignKey('devices.id'))
    device = relationship('Device', back_populates='modules')


class Device(Base):
    __tablename__ = 'devices'

    id = Column(Integer, primary_key=True)
    ip = Column(String)
    reports = relationship('Report', back_populates='device')
    modules = relationship('Module', back_populates='device')


# Define a class representing the 'reports' table
class Report(Base):
    __tablename__ = 'reports'

    id = Column(Integer, primary_key=True)
    timestamp = Column(DateTime, default=datetime.now)
    data = Column(Text)
    device_id = Column(Integer, ForeignKey('devices.id'))
    device = relationship('Device', back_populates='reports')

    def __repr__(self):
        return f"id: {self.id}\n" \
               f"timestamp: {self.timestamp}\n" \
               f"data: {self.data}\n" \
               f"device_id: {self.device_id}"


class DatabaseService(object):
    def __init__(self):
        # Create a SQLite database engine
        self.engine = create_engine('sqlite:///example.db')
        # Bind the engine to the base class
        Base.metadata.bind = self.engine
        # Create the database schema
        Base.metadata.create_all(self.engine)
        # Create a sessionmaker bound to the engine
        self.Session = sessionmaker(bind=self.engine)

    def find_device_by_name(self, ip):
        """Find a device by its name."""
        session = self.Session()
        try:
            if 'devices' in Base.metadata.tables:
                device = session.query(Device).filter_by(ip=ip).first()
            else:
                device = None
        except Exception as e:
            print(f"Error finding device by name: {e}")
            device = None
        finally:
            session.close()
        return device

    def create_device(self, ip):
        """
        Create a new device with the given IP address.
        """
        device = Device(ip=ip)
        session = self.Session()
        session.add(device)
        session.commit()
        session.close()

    def get_all_devices(self):
        """
        Retrieve all devices from the database.
        """
        session = self.Session()
        devices = []
        try:
            devices = session.query(Device).all()
        except Exception as e:
            print(f"Error retrieving devices: {e}")
        finally:
            session.close()
        return devices

    def create_client_module(self, file_path, active=True, priority=0, tipe="client"):
        """
        Create a new module with the given file path for each device.
        """
        try:
            with self.Session() as session:
                if tipe == "server":
                    device = session.query(Device).filter_by(ip=tipe).first()
                    module = Module(file_path=file_path, active=active, priority=priority)
                    session.add(module)
                    module.device = device
                    device.modules.append(module)
                    session.commit()
                    return

                devices = session.query(Device).all()
                for device in devices:
                    module = Module(file_path=file_path, active=active, priority=priority)
                    # Add module to the session first
                    session.add(module)
                    # Link the module to the device
                    module.device = device
                    # Add the module to the device's modules relationship
                    device.modules.append(module)
                session.commit()
        except Exception as e:
            print(f"Error creating client modules: {e}")
            raise  # Reraise the exception for handling at a higher level

    def get_modules_for_device(self, ip):
        """
        Retrieve all modules for a device by its name.
        """
        try:
            with self.Session() as session:
                device = session.query(Device).filter_by(ip=ip).first()
                if device:
                    modules = device.modules
                    return modules
                else:
                    return None
        except Exception as e:
            print(f"Error retrieving modules for device {ip}: {e}")
            return None

    def change_module_priority(self, device_ip, module_path, new_priority):
        """
        Change the priority of a module for a specific device.
        """
        try:
            with self.Session() as session:
                # Find the device by its IP address
                device = session.query(Device).filter_by(ip=device_ip).first()
                if device:
                    # Find the module by its file path and device id
                    module = session.query(Module).filter_by(device_id=device.id, file_path=module_path).first()
                    if module:
                        # Update the priority of the module
                        module.priority = new_priority
                        session.commit()
        except Exception as e:
            print(f"Error changing module priority: {e}")
            raise  # Reraise the exception for handling at a higher level

    def get_current_module_priority(self, device_ip, module_name):
        """
        Get the priority of a module for a specific device and return the current priority.
        """
        try:
            with self.Session() as session:
                if device_ip == "server":
                    device = session.query(Device).filter_by(ip=device_ip).first()
                    module_path = f"C:\\Users\\flore\\PycharmProjects\\DP\\gui\\..\\modules\\server_modules\\{module_name}.py"
                    module = session.query(Module).filter_by(device_id=device.id, file_path=module_path).first()
                    if module:
                        # Return the priority of the module
                        return module.priority, module_path
                # Find the device by its IP address
                device = session.query(Device).filter_by(ip=device_ip).first()
                if device:
                    # Extract the module file path based on the module name
                    module_path = f"C:\\Users\\flore\\PycharmProjects\\DP\\gui\\..\\modules\\client_modules\\{module_name}.py"
                    # Find the module by its file path and device id
                    module = session.query(Module).filter_by(device_id=device.id, file_path=module_path).first()
                    if module:
                        # Return the priority of the module
                        return module.priority, module_path
        except Exception as e:
            print(f"Error retrieving module priority: {e}")
            raise  # Reraise the exception for handling at a higher level

    def save_report(self, device_ip, report_data):
        """
        Save a report for a specific device.
        :param device_ip: The IP address of the device.
        :param report_data: The data to be saved in the report.
        """
        try:
            with self.Session() as session:
                # Find the device by its IP address
                device = session.query(Device).filter_by(ip=device_ip).first()
                if device:
                    # Create a new report instance
                    new_report = Report(data=json.dumps(report_data["modules"]), device=device,
                                        timestamp=datetime.fromisoformat(report_data["date"]))
                    # Add the report to the session
                    session.add(new_report)
                    # Commit the changes
                    session.commit()
        except Exception as e:
            print(f"Error saving report: {e}")
            raise  # Reraise the exception for handling at a higher level

    def get_last_report_for_device(self, device_ip):
        """
        Retrieve the last report for the specified device.
        """
        try:
            with self.Session() as session:
                # Find the device by its IP address
                device = session.query(Device).filter_by(ip=device_ip).first()
                if device:
                    # Retrieve the last report for the device
                    last_report = (
                        session.query(Report)
                        .filter(Report.device_id == device.id)
                        .order_by(desc(Report.timestamp))
                        .first()
                    )
                    if last_report:
                        # Convert the Report object to a dictionary
                        report_dict = {
                            'timestamp': last_report.timestamp,
                            'data': last_report.data,
                        }
                        return report_dict
                    else:
                        return None
                else:
                    return None
        except Exception as e:
            print(f"Error retrieving last report for device {device_ip}: {e}")
            return None
